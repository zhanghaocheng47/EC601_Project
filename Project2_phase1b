import requests
import json

from google.cloud import language
from google.oauth2 import service_account
from google.cloud.language import enums
from google.cloud.language import types

client= language.LanguageServiceClient .from_service_account_json('services.json')
# Define functions
def pull_googlenlp( client, url, invalid_types=['OTHER'], **data) :
    html= load_text_from_url( url, **data)
    if not html:
        return None


document= types .Document(content= html,type= language.enums .Document .Type .HTML)
features={'extract_syntax' :True,'extract_entities' :True,'extract_document_sentiment' :True,'extract_entity_sentiment' :True,'classify_text' :False}
response= client.annotate_text( document= document, features= features)
sentiment= response.document_sentiment
entities= response.entities
response= client.classify_text(document)
categories= response.categories






def get_type(type) :
    return client.enums.Entity.Type(entity.type).name
    result = {}
    result['sentiment'] = []

    result['entities'] = []
    result['categories'] = []

    if sentiment:
        result['sentiment'] = [{'magnitude': sentiment.magnitude, 'score': sentiment.score}]

    for entity in entities:
        if get_type(entity.type) not in invalid_types:
            result['entities'].append({'name': entity.name, 'type': get_type(entity.type), 'salience': entity.salience,
                                       'wikipedia_url': entity.metadata.get('wikipedia_url', '-')})

        for category in categories: result['categories'].append(
            {'name': category.name, 'confidence': category.confidence})
    return None













def load_text_from_url(url, **data):
    timeout = data.get('timeout', 20)
    results = []
    try:
        print("Extracting text from: {}".format(url))
        response = requests.get(url, timeout=timeout)
        text = response.text
        status = response.status_code
        if status == 200 and len(text) > 0:
            return text
            return None
    except Exception as E:
            print('Problem with url: {0}.'.format(url))



    return None
